ames_test <- testing(ames_split)
ames_split <- tidymodels::initial_split(ames, prop = 0.8, strata = sale_price)
ames_train <- tidymodels::training(ames_split)
?initial_split
ames_split <- rsample::initial_split(ames, prop = 0.8, strata = sale_price)
ames_train <- rsample::training(ames_split)
ames_test <- rsample::testing(ames_split)
ames_rec <-
recipe(sale_price ~ ., data = ames_train) %>%
step_string2factor(all_nominal()) %>%
step_other(all_nominal(), threshold = 0.01) %>%
step_nzv(all_nominal())
?recipe
?step_string2factor
ames_rec <-
recipes::recipe(sale_price ~ ., data = ames_train) %>%
recipes::step_string2factor(all_nominal()) %>%
recipes::step_other(all_nominal(), threshold = 0.01) %>%
recipes::step_nzv(all_nominal())
ames_rec_prepped <- prep(ames_rec)
?prep
ames_rec_prepped <- recipes::prep(ames_rec)
ames_train_prepped <- recipes::bake(ames_rec_prepped, new_data = NULL)
ames_test_prepped <- recipes::bake(ames_rec_prepped, ames_test)
lasso_spec <- tidymodels::linear_reg(penalty = tune(), mixture = 1) %>% # mixture = 1 : LASSO, 0 : ridge
set_engine("glmnet")
?linear_reg
?workflow
?linear_reg
lasso_spec <- parsnip::linear_reg(penalty = tune(), mixture = 1) %>% # mixture = 1 : LASSO, 0 : ridge
set_engine("glmnet")
install.packages("mlbench")
library(mlbench)     # for PimaIndiansDiabetes2 dataset
library(tidymodels)  # for model preparation and fitting
head(PimaIndiansDiabetes2)
data(PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
# See the data strcuture
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
Diabetes <- na.omit(PimaIndiansDiabetes2) #removing NA values
levels(Diabetes$diabetes)
# data level
levels(Diabetes$diabetes)
# Refernce Level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
# train - test
set.seed(123)
# Create data split for train and test
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
# Create training data
diabetes_train <- diabetes_split %>%
training()
# Create testing data
diabetes_test <- diabetes_split %>%
testing()
# Number of rows in train and test dataset
nrow(diabetes_train)
nrow(diabetes_test)
fitted_logistic_model<- logistic_reg() %>%
# Set the engine
set_engine("glm") %>%
# Set the mode
set_mode("classification") %>%
# Fit the model
fit(diabetes~., data = diabetes_train)
tidy(fitted_logistic_model)    # Generate Summary Table
tidy(fitted_logistic_model, exponentiate = TRUE)
?set_engine
?logistic_reg
?set_mode
?fit
?set_engine
?set_mode
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
library(mlbench)     # for PimaIndiansDiabetes2 dataset
library(tidymodels)  # for model preparation and fitting
## 데이터 불러오기
data(PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
# See the data strcuture
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
#removing NA values
Diabetes <- na.omit(PimaIndiansDiabetes2)
# data level
levels(Diabetes$diabetes)
# setting Refernce Level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
# train - test split
set.seed(123)
# Create data split for train and test
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
# Create training data
diabetes_train <- diabetes_split %>%
training()
# Create testing data
diabetes_test <- diabetes_split %>%
testing()
# Number of rows in train and test dataset
nrow(diabetes_train)
nrow(diabetes_test)
fitted_logistic_model <- phiml::LogisticRegression()
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
fitted_logistic_model <- phiml::LogisticRegression()
?set_engine
?set_mode
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
fitted_logistic_model <- phiml::LogisticRegression()
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train)
tidy(fitted_logistic_model)    # Generate Summary Table
tidy(fitted_logistic_model, exponentiate = TRUE) ## odds ratio
?relevel
library(mlbench)
library(tidymodels)
## import data
data(PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
data(PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
## view the structures of data
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
## removing NA values
Diabetes <- na.omit(PimaIndiansDiabetes2)
glimpse(Diabetes)
## check the levels of outcome
levels(Diabetes$diabetes)
## setting reference level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
set.seed(123)
# Create data split for train and test
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
# Create training data
diabetes_train <- diabetes_split %>%
training()
# Create testing data
diabetes_test <- diabetes_split %>%
testing()
# Number of rows in train and test dataset
nrow(diabetes_train)
nrow(diabetes_test)
## fitting logistic regression
fitted_logistic_model<- logistic_reg() %>%
# Set the engine
set_engine("glm") %>%
# Set the mode
set_mode("classification") %>%
# Fit the model
fit(diabetes~., data = diabetes_train)
tidy(fitted_logistic_model)
tidy(fitted_logistic_model, exponentiate = TRUE)
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train)
tidy(fitted_logistic_model)
tidy(fitted_logistic_model, exponentiate = TRUE)
pred_class <- predict(fitted_logistic_model,
new_data = diabetes_test,
type = "class")
pred_class[1:5,]
diabetes_results <- diabetes_test %>%
select(diabetes) %>%
bind_cols(pred_class, pred_proba)
diabetes_results[1:5, ]
# Prediction Probabilities
pred_proba <- predict(fitted_logistic_model,
new_data = diabetes_test,
type = "prob")
diabetes_results <- diabetes_test %>%
select(diabetes) %>%
bind_cols(pred_class, pred_proba)
diabetes_results[1:5, ]
##
conf_mat(diabetes_results, truth = diabetes,
estimate = .pred_class)
## combined reuslt
custom_metrics <- metric_set(accuracy, sens, spec, precision, recall, f_meas, kap, mcc)
custom_metrics(diabetes_results,
truth = diabetes,
estimate = .pred_class)
## AUROC
roc_auc(diabetes_results,
truth = diabetes,
.pred_pos)
## ROC curve
diabetes_results %>%
roc_curve(truth = diabetes, .pred_pos) %>%
autoplot()
library(phiml)
library(mlbench)
library(tidymodels)
## import data
data(PimaIndiansDiabetes2)
head(PimaIndiansDiabetes2)
## view the structures of data
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
## removing NA values
Diabetes <- na.omit(PimaIndiansDiabetes2)
glimpse(Diabetes)
## check the levels of outcome
levels(Diabetes$diabetes)
## setting reference level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
## Train-Test Split
set.seed(123)
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
diabetes_train <- diabetes_split %>%
training()
diabetes_test <- diabetes_split %>%
testing()
nrow(diabetes_train)
nrow(diabetes_test)
## Cross validation
## fitting logistic regression
# fitted_logistic_model<- logistic_reg() %>%
#   set_engine("glm") %>%
#   set_mode("classification") %>%
#   fit(diabetes~., data = diabetes_train)
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train)
## result
tidy(fitted_logistic_model)
tidy(fitted_logistic_model, exponentiate = TRUE)
tidy(fitted_logistic_model, exponentiate = TRUE) %>%
filter(p.value < 0.05)
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
library(phiml)
f <- "diabetes~."
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train, formula = f)
?parsnip::fit
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
f <- "diabetes~."
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train, formula = f)
library(phiml)
library(phiml)
f <- "diabetes~."
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train, formula = f)
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
f <- "diabetes~."
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train, formula = f)
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
f <- "diabetes~."
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train, formula = f)
f <- "diabetes~."
eval(parse(text=))
f <- "diabetes~."
eval(parse(text=f))
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
f <- "diabetes~."
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train, formula = f)
tidy(fitted_logistic_model)
tidy(fitted_logistic_model, exponentiate = TRUE)
## sample data
data(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
## view the structures of data
glimpse(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 <- tibble::as_tibble(PimaIndiansDiabetes2)
## view the structures of data
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
## removing NA values
Diabetes <- na.omit(PimaIndiansDiabetes2)
glimpse(Diabetes)
## check the levels of outcome
levels(Diabetes$diabetes)
## setting reference level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
## Train-Test Split
set.seed(123)
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
diabetes_train <- diabetes_split %>%
training()
diabetes_test <- diabetes_split %>%
testing()
nrow(diabetes_train)
nrow(diabetes_test)
f <- "diabetes~."
fitted_logistic_model <- phiml::LogisticRegression(data = diabetes_train, formula = f)
tidy(fitted_logistic_model)
tidy(fitted_logistic_model, exponentiate = TRUE)
tidy(fitted_logistic_model, exponentiate = TRUE) %>%
filter(p.value < 0.05)
?f_meas
?sens
?predict
?tidy
library(mlbench)
library(tidymodels)
library(tibble)
## data frame to tibble
data(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 <- tibble::as_tibble(PimaIndiansDiabetes2)
## view the structures of data
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
## removing NA values
Diabetes <- na.omit(PimaIndiansDiabetes2)
glimpse(Diabetes)
## check the levels of outcome
levels(Diabetes$diabetes)
## setting reference level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
## Train-Test Split
set.seed(123)
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
diabetes_train <- diabetes_split %>%
training()
diabetes_test <- diabetes_split %>%
testing()
nrow(diabetes_train)
nrow(diabetes_test)
?fit
## fitting logistic
fitted_logistic_model<- parsnip::logistic_reg() %>%
parsnip::set_engine("glm") %>%
parsnip::set_mode("classification") %>%
parsnip::fit(diabetes~., data = diabetes_train)
fitted_logistic_model
tidy(fitted_logistic_model)
?tidy
recipes::(fitted_logistic_model)
recipes::tidy(fitted_logistic_model)
generics::tidy(fitted_logistic_model)
?goophi::logisticRegression
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
?goophi::logisticRegression
?goophi::logisticRegression
?parsnip::set_engine
library(goophi)
?goophi::logisticRegression
?goophi::logisticRegression
# f <- "diabetes~."
fitted_logistic_model <- goophi::logisticRegression(data = diabetes_train, formula = f)
f <- "diabetes~."
fitted_logistic_model <- goophi::logisticRegression(data = diabetes_train, formula = f)
recipes::tidy(fitted_logistic_model)
library(goophi)
?goophi::logisticRegression
# 함수 추가 시 roxygen 주석을 포함시켜 작성하고, 아래 코드로 주석을 .Rd 파일로 전환 및 NAMESPACE에 추가
devtools::document()
goophi::logisticRegression
?goophi::logisticRegression
library(mlbench)
library(tidymodels)
library(tibble)
## data frame to tibble
data(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 <- tibble::as_tibble(PimaIndiansDiabetes2)
## view the structures of data
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
## removing NA values
Diabetes <- na.omit(PimaIndiansDiabetes2)
glimpse(Diabetes)
## check the levels of outcome
levels(Diabetes$diabetes)
## setting reference level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
## Train-Test Split
set.seed(123)
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
diabetes_train <- diabetes_split %>%
training()
diabetes_test <- diabetes_split %>%
testing()
nrow(diabetes_train)
nrow(diabetes_test)
## fitting svm
fitted_svm_model <- parsnip::svm_rbf() %>%
parsnip::set_engine("kernlab") %>%
parsnip::set_mode("classification") %>%
parsnip::fit(diabetes~., data = diabetes_train)
install.packages("kernlab")
fitted_svm_model <- parsnip::svm_rbf() %>%
parsnip::set_engine("kernlab") %>%
parsnip::set_mode("classification") %>%
parsnip::fit(diabetes~., data = diabetes_train)
fitted_svm_model
## fitting svm
fitted_svm_model <- parsnip::svm_linear() %>%
parsnip::set_engine("kernlab") %>%
parsnip::set_mode("classification") %>%
parsnip::fit(diabetes~., data = diabetes_train)
fitted_svm_model
## fitting svm
fitted_svm_model <- parsnip::svm_linear(cost = 1, margin = 0.1) %>%
parsnip::set_engine("kernlab") %>%
parsnip::set_mode("classification") %>%
parsnip::fit(diabetes~., data = diabetes_train)
fitted_svm_model
parsnip::predict.model_fit(fitted_svm_model, diabetes_test)
## fitting svm
fitted_svm_model <- parsnip::svm_linear(cost = 1) %>%
parsnip::set_engine("kernlab") %>%
parsnip::set_mode("classification") %>%
parsnip::fit(diabetes~., data = diabetes_train)
## fitting svm
fitted_svm_model <- parsnip::svm_linear(cost = 1) %>%
parsnip::set_engine("kernlab") %>%
parsnip::set_mode("classification") %>%
parsnip::fit(diabetes~., data = diabetes_train)
## fitting svm
fitted_svm_model <- parsnip::svm_linear(cost = 1) %>%
parsnip::set_engine("LiblineaR") %>%
parsnip::set_mode("classification") %>%
parsnip::fit(diabetes~., data = diabetes_train)
fitted_svm_model
parsnip::predict.model_fit(fitted_svm_model, diabetes_test)
library(goophi)
devtools::document()
library(mlbench)
library(tidymodels)
library(tibble)
#### import data ####
## data frame to tibble
data(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 <- tibble::as_tibble(PimaIndiansDiabetes2)
## view the structures of data
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
#### data preprocessing ####
## removing NA values
Diabetes <- na.omit(PimaIndiansDiabetes2)
glimpse(Diabetes)
## check the levels of outcome
levels(Diabetes$diabetes)
## setting reference level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
## Train-Test Split
set.seed(123)
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
diabetes_train <- diabetes_split %>%
training()
diabetes_test <- diabetes_split %>%
testing()
nrow(diabetes_train)
nrow(diabetes_test)
f <- "diabetes~."
fitted_svm_model <- goophi::knn(data = diabetes_train, formula = f)
fitted_svm_model
parsnip::predict.model_fit(fitted_svm_model, diabetes_test)
library(goophi)
devtools::document()
library(mlbench)
library(tidymodels)
library(tibble)
#### import data ####
## data frame to tibble
data(PimaIndiansDiabetes2)
PimaIndiansDiabetes2 <- tibble::as_tibble(PimaIndiansDiabetes2)
## view the structures of data
glimpse(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
#### data preprocessing ####
## removing NA values
Diabetes <- na.omit(PimaIndiansDiabetes2)
glimpse(Diabetes)
## check the levels of outcome
levels(Diabetes$diabetes)
## setting reference level
Diabetes$diabetes <- relevel(Diabetes$diabetes, ref = "pos")
levels(Diabetes$diabetes)
## Train-Test Split
set.seed(123)
diabetes_split <- initial_split(Diabetes,
prop = 0.75,
strata = diabetes)
diabetes_train <- diabetes_split %>%
training()
diabetes_test <- diabetes_split %>%
testing()
nrow(diabetes_train)
nrow(diabetes_test)
f <- "diabetes~."
fitted_svm_model <- goophi::svm(data = diabetes_train, formula = f)
install.packages("LiblineaR")
fitted_svm_model <- goophi::svm(data = diabetes_train, formula = f)
fitted_svm_model
parsnip::predict.model_fit(fitted_svm_model, diabetes_test)
